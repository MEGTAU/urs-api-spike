paths:
  /relationships:
    get:
      summary: Get all relationships
      description: Define a relationship between two contacts. The relationship will have a type (e.g. parent-child) and a profiles for each member in the relationship
      responses:
        '200':
          description: A list of relationships.
          content:
            application/json:
              schema:
                $ref: './components.yaml#/components/schemas/RelationshipList'
    post:
      summary: Create a relationship
      description: Define a relationship between two contacts. The relationship will have a type (e.g. parent-child) and a profiles for each member in the relationship
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components.yaml#/components/schemas/Relationship'
      responses:
        '201':
          description: Relationship created
  /relationships/bulk:
    put:
      summary: Bulk update relationships
      description: Define a relationship between two contacts. The relationship will have a type (e.g. parent-child) and a profiles for each member in the relationship
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: './components.yaml#/components/schemas/Relationship'
      responses:
        '200':
          description: Relationships updated
  /relationships/{relationshipId}:
    get:
      summary: Get a relationship by ID
      description: Define a relationship between two contacts. The relationship will have a type (e.g. parent-child) and a profiles for each member in the relationship
      parameters:
        - name: relationshipId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A single relationship.
          content:
            application/json:
              schema:
                $ref: './components.yaml#/components/schemas/Relationship'
        '404':
          description: Relationship not found
    put:
      summary: Update a relationship
      description: Define a relationship between two contacts. The relationship will have a type (e.g. parent-child) and a profiles for each member in the relationship
      parameters:
        - name: relationshipId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './components.yaml#/components/schemas/Relationship'
      responses:
        '200':
          description: Relationship updated
        '404':
          description: Relationship not found
    delete:
      summary: Delete a relationship
      description: Define a relationship between two contacts. The relationship will have a type (e.g. parent-child) and a profiles for each member in the relationship
      parameters:
        - name: relationshipId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Relationship deleted
        '404':
          description: Relationship not found